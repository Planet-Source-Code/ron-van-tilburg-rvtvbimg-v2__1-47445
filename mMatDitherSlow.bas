Attribute VB_Name = "mMatDither"
Option Explicit

'mMatDither.bas - Remapping colors by various Matrix Dithers

'- Â©2003,2001 Ron van Tilburg - All rights reserved  7 Jun 2003, 1 Jan 2001
'- Amateur reuse is permitted subject to Copyright notices being retained and Credits to author being quoted.
'- Commercial use not permitted - email author please

'this module makes extensive use of HistCmap.bas for three functions,
'  InitColorMappingHistogram()
'  FreeColorMappingHistogram()
'  MatchColorbyHistogram()
' Gamut in Cremap.bas for Gamut Parameters

'================== MATRIX DITHERING ====================================

Private DMat()         As Long  'a dither matrix against which values are compared
Private DMatR(0 To 79) As Long  'a rotated dither matrix against which values are compared
Private DModX          As Long  'Width of DMat
Private DModY          As Long  'Height of DMat
Private DShift         As Long  'Offset per Row

'======================= MATRIX DITHERING =====================================================================

'This routine takes a new colormap, and the original PixBit array and remaps the array a pixel at a time
'to the best fitting color by Dithering against a a dither matrix. This minimises the error propagation of
'approximate colormaps. There may be unused (unmappable) colors in the colormap
'the original Pixel array will be resized to the equivalent of a 8BPP array, correctly size without padding
'every entry will be the index into the map

Public Sub MatDitherMapColors(ByVal Width As Long, ByVal Height As Long, _
                              ByRef PixBits() As Byte, _
                              ByVal BitsPerPixel As Long, _
                              ByRef CMap() As ARGB, _
                              ByVal NCMapColors As Long, _
                              ByVal CMAPMode As Long, _
                              ByVal DitherMode As Long)

 Dim x As Long, y As Long, z As Long, w As Long, Skip As Long, RowMod As Long, NewRowMod As Long
 Dim r As Long, g As Long, b As Long, wColor As Long, p As Long
 Dim CIndex As Integer, dval As Long, dinc As Long, dcol As Integer, drow As Integer

  If BitsPerPixel <> PIC_16BPP _
     And BitsPerPixel <> PIC_24BPP _
     And BitsPerPixel <> PIC_32BPP Then Exit Sub           'will only work for unmapped DIBs

  ' Initialize Remapping variables
  Call AnalyseGamut(CMAPMode, CMap(), NCMapColors)
  
  If CMAPMode <> PIC_FIXED_CMAP_GREY Then
    If Not Gamut.IsFixedRegular Then Call InitColorMappingHistogram(CMap(), NCMapColors)
  End If
  
  Call SetDitherMatrix(DitherMode, CMAPMode)
  
  Skip = BitsPerPixel \ 8                                             'size of a pixel in bytes
  RowMod = (UBound(PixBits) - LBound(PixBits) + 1) \ Height           'the byte width of a row
  
  If CMAPMode = PIC_FIXED_CMAP_32K Then
    NewRowMod = BMPRowModulo(Width, PIC_16BPP)
  Else
    NewRowMod = BMPRowModulo(Width, PIC_8BPP)
  End If

  drow = 0
  For y = 0 To Height - 1                                             'assume bmap is right way up
    z = y * RowMod
    p = y * NewRowMod                                                 'this is where we put the new byte
    w = z + Skip * (Width - 1)
    dcol = 0

    For x = z To w Step Skip                            'pixel 0,1,2,3 in a row

      Select Case BitsPerPixel
       Case PIC_16BPP:                                  'One case for 16-bit DIBs
        wColor = PixBits(x) + PixBits(x + 1) * 256&
        b = (wColor And &H1F&) * 8&
        g = (wColor And &H3E0&) \ 4&
        r = (wColor And &H7C00&) \ 128&

       Case PIC_24BPP:                                  'Another for 24-bit DIBs
        b = PixBits(x)
        g = PixBits(x + 1)
        r = PixBits(x + 2)

       Case PIC_32BPP:                                  'And another for 32-bit DIBs
        b = PixBits(x)
        g = PixBits(x + 1)
        r = PixBits(x + 2)
      End Select

      dval = DMat(drow, dcol)                           'find the dither threshold
'      If DitherMode = PIC_DITHER_BIN Then
'        dval = DMatR(20 * (y Mod 4) + (x - z + 8 * (y \ 4)) Mod 20)
'      End If
      
      With Gamut
        If CMAPMode = PIC_FIXED_CMAP_GREY Then    '------------ Grey Dithering ---------------
          CIndex = (.sG * RGBtoGrey(r, g, b) + dval) \ .dDiv
        Else                                      '------------------------ Full Color -------------------
          r = (.sR * r + dval) \ .dDiv
          g = (.sG * g + dval) \ .dDiv
          b = (.sB * b + dval) \ .dDiv
          
          If .IsFixedRegular Then                           'Index is calculable
            CIndex = r * .shR + g * .shG + b
          Else                                              'Lookup nearest color
            r = (r * 256) \ .nR: If r > 255 Then r = 255
            g = (g * 256) \ .nG: If g > 255 Then g = 255
            b = (b * 256) \ .nB: If b > 255 Then b = 255
            CIndex = MatchColorbyHistogram(r, g, b)
          End If
        End If
      End With
      
      If CMAPMode = PIC_FIXED_CMAP_32K Then
        PixBits(p) = CIndex And &HFF
        p = p + 1
        PixBits(p) = (CIndex And &HFF00) \ 256&
        p = p + 1
      Else
        PixBits(p) = CIndex
        p = p + 1
      End If

      dcol = dcol + 1
      If dcol = DModX Then dcol = 0
    Next x

    drow = drow + 1     'pre multiplied
    If drow = DModY Then drow = 0
  Next y

  'OK everything is now mapped so lets resize the PixBits array
  ReDim Preserve PixBits(0 To NewRowMod * Height - 1) As Byte

  If CMAPMode <> PIC_FIXED_CMAP_GREY Then
    If Not Gamut.IsFixedRegular Then Call FreeColorMappingHistogram
  End If
  '  MsgBox "OK DitheredRemap"

End Sub

'------------------------- Setup of Dither Matrices and Gamut scaling -----------------------------------------
  
Private Sub SetDitherMatrix(ByVal WhichDither As Long, ByVal CMAPMode As Long)

 Dim i As Long, j As Long, k As Long, m As Long, dd() As Byte
  
  dd = LoadResData(WhichDither Or &H4000, "CUSTOM")
  If FSet(CMAPMode, PIC_FIXED_CMAP) Then m = 256 Else m = 64    'Fixed=256, Variable=64
  k = Sqr(UBound(dd) + 1)
  ReDim DMat(0 To k - 1, 0 To k - 1)
  For i = 0 To UBound(dd)
    If m = 256 Then
      DMat(i \ k, i Mod k) = m * CLng(dd(i))
    Else
      DMat(i \ k, i Mod k) = m * (CLng(dd(i)) \ 4)
    End If
  Next i
  DModX = k
  DModY = k
  DShift = 0
End Sub

Private Sub SetDitherMatrixSlow(ByVal WhichDither As Long, ByVal CMAPMode As Long)

 Dim zdmap() As Variant, i As Long, j As Long, k As Long, m As Long, dd() As Byte

  Select Case WhichDither
   Case PIC_DITHER_BIN:                               ' Binary Blue Noiseish
    '16x16
    zdmap() = Array(111, 239, 44, 164, 98, 224, 36, 172, 108, 236, 47, 167, 96, 227, 39, 175, _
                     31, 147, 213, 89, 18, 158, 218, 84, 28, 145, 214, 90, 17, 157, 217, 87, _
                    255, 112, 5, 128, 240, 124, 14, 142, 252, 114, 6, 130, 243, 127, 12, 141, _
                    191, 63, 200, 66, 177, 48, 196, 76, 188, 60, 203, 65, 179, 51, 199, 79, _
                    103, 231, 32, 170, 106, 232, 40, 160, 100, 228, 35, 169, 104, 235, 43, 163, _
                     21, 155, 223, 83, 26, 148, 208, 92, 22, 153, 220, 80, 25, 151, 210, 95, _
                    245, 123, 9, 139, 248, 116, 0, 134, 246, 120, 10, 136, 251, 119, 3, 133, _
                    181, 53, 192, 72, 185, 56, 206, 70, 182, 54, 195, 75, 186, 59, 205, 69, _
                    109, 237, 46, 166, 97, 226, 38, 174, 110, 238, 45, 165, 99, 225, 37, 173, _
                     29, 144, 215, 91, 16, 156, 216, 86, 30, 146, 212, 88, 19, 159, 219, 85, _
                    253, 115, 7, 131, 242, 126, 13, 140, 254, 113, 4, 129, 241, 125, 15, 143, _
                    189, 61, 202, 64, 178, 50, 198, 78, 190, 62, 201, 67, 176, 49, 197, 77, _
                    101, 229, 34, 168, 105, 234, 42, 162, 102, 230, 33, 171, 107, 233, 41, 161, _
                     23, 152, 221, 81, 24, 150, 211, 94, 20, 154, 222, 82, 27, 149, 209, 93, _
                    247, 121, 11, 137, 250, 118, 2, 132, 244, 122, 8, 138, 249, 117, 1, 135, _
                    183, 55, 194, 74, 187, 58, 204, 68, 180, 52, 193, 73, 184, 57, 207, 71)
                    
'    Call GenBlueNoiseMaskEST(16, zdmap())    'needs module GenBNM.bas (not included in distribution)
    '------------------------------------------------------------------------
   Case PIC_DITHER_HTC:                               ' Printer HalfTone
    '8x8
    zdmap = Array(80, 192, 224, 48, 88, 200, 232, 56, _
                 128, 0, 96, 160, 136, 8, 104, 168, _
                 208, 32, 64, 240, 216, 40, 72, 248, _
                 112, 176, 144, 16, 120, 184, 152, 24, _
                  92, 204, 236, 60, 84, 196, 228, 52, _
                 140, 12, 108, 172, 132, 4, 100, 164, _
                 220, 44, 76, 252, 212, 36, 68, 244, _
                 124, 188, 156, 28, 116, 180, 148, 20)

    '-----------------------------------------------------------------------
   Case PIC_DITHER_FDIAG:                             'forward diagonal
    '8x8
'    zdmap = Array(0, 112, 192, 240, 8, 120, 200, 248, _
                 96, 16, 128, 208, 104, 24, 136, 216, _
                176, 80, 32, 144, 184, 88, 40, 152, _
                224, 160, 64, 48, 232, 168, 72, 56, _
                 12, 124, 204, 252, 4, 116, 196, 244, _
                108, 28, 140, 220, 100, 20, 132, 212, _
                188, 92, 44, 156, 180, 84, 36, 148, _
                236, 172, 76, 60, 228, 164, 68, 52)
    '16x16
    zdmap() = Array(239, 179, 43, 91, 227, 187, 36, 85, 236, 176, 40, 88, 224, 184, 39, 87, _
                    155, 197, 113, 27, 145, 203, 124, 21, 152, 198, 114, 24, 146, 200, 127, 23, _
                     61, 72, 251, 162, 49, 65, 246, 172, 62, 74, 248, 160, 50, 66, 245, 175, _
                    101, 13, 128, 209, 105, 1, 140, 220, 102, 14, 130, 210, 106, 2, 143, 222, _
                    231, 191, 33, 81, 233, 181, 44, 95, 228, 188, 34, 82, 234, 182, 47, 92, _
                    151, 207, 123, 19, 157, 193, 116, 30, 148, 204, 120, 16, 158, 194, 119, 28, _
                     55, 71, 241, 169, 57, 77, 252, 166, 52, 68, 242, 170, 58, 78, 255, 164, _
                    111, 7, 137, 219, 99, 9, 134, 214, 108, 4, 138, 216, 96, 10, 133, 213, _
                    237, 177, 41, 89, 225, 185, 38, 86, 238, 178, 42, 90, 226, 186, 37, 84, _
                    153, 199, 115, 25, 147, 201, 126, 22, 154, 196, 112, 26, 144, 202, 125, 20, _
                     63, 75, 249, 161, 51, 67, 244, 174, 60, 73, 250, 163, 48, 64, 247, 173, _
                    103, 15, 131, 211, 107, 3, 142, 223, 100, 12, 129, 208, 104, 0, 141, 221, _
                    229, 189, 35, 83, 235, 183, 46, 93, 230, 190, 32, 80, 232, 180, 45, 94, _
                    149, 205, 121, 17, 159, 195, 118, 29, 150, 206, 122, 18, 156, 192, 117, 31, _
                     53, 69, 243, 171, 59, 79, 254, 165, 54, 70, 240, 168, 56, 76, 253, 167, _
                    109, 5, 139, 217, 97, 11, 132, 212, 110, 6, 136, 218, 98, 8, 135, 215)
    '-----------------------------------------------------------------------
   Case PIC_DITHER_BDIAG:                             'backward diagonal
     ' 8x8
'    zdmap = Array(240, 208, 144, 48, 248, 216, 152, 56, _
                  192, 128, 32, 64, 200, 136, 40, 72, _
                  112, 16, 80, 160, 120, 24, 88, 168, _
                    0, 96, 176, 224, 8, 104, 184, 232, _
                  252, 220, 156, 60, 244, 212, 148, 52, _
                  204, 140, 44, 76, 196, 132, 36, 68, _
                  124, 28, 92, 172, 116, 20, 84, 164, _
                   12, 108, 188, 236, 4, 100, 180, 228)
    '16x16
    zdmap() = Array(111, 51, 171, 219, 99, 59, 164, 213, 108, 48, 168, 216, 96, 56, 167, 215, _
                     27, 69, 241, 155, 17, 75, 252, 149, 24, 70, 242, 152, 18, 72, 255, 151, _
                    189, 200, 123, 34, 177, 193, 118, 44, 190, 202, 120, 32, 178, 194, 117, 47, _
                    229, 141, 0, 81, 233, 129, 12, 92, 230, 142, 2, 82, 234, 130, 15, 94, _
                    103, 63, 161, 209, 105, 53, 172, 223, 100, 60, 162, 210, 106, 54, 175, 220, _
                     23, 79, 251, 147, 29, 65, 244, 158, 20, 76, 248, 144, 30, 66, 247, 156, _
                    183, 199, 113, 41, 185, 205, 124, 38, 180, 196, 114, 42, 186, 206, 127, 36, _
                    239, 135, 9, 91, 227, 137, 6, 86, 236, 132, 10, 88, 224, 138, 5, 85, _
                    109, 49, 169, 217, 97, 57, 166, 214, 110, 50, 170, 218, 98, 58, 165, 212, _
                     25, 71, 243, 153, 19, 73, 254, 150, 26, 68, 240, 154, 16, 74, 253, 148, _
                    191, 203, 121, 33, 179, 195, 116, 46, 188, 201, 122, 35, 176, 192, 119, 45, _
                    231, 143, 3, 83, 235, 131, 14, 95, 228, 140, 1, 80, 232, 128, 13, 93, _
                    101, 61, 163, 211, 107, 55, 174, 221, 102, 62, 160, 208, 104, 52, 173, 222, _
                     21, 77, 249, 145, 31, 67, 246, 157, 22, 78, 250, 146, 28, 64, 245, 159, _
                    181, 197, 115, 43, 187, 207, 126, 37, 182, 198, 112, 40, 184, 204, 125, 39, _
                    237, 133, 11, 89, 225, 139, 4, 84, 238, 134, 8, 90, 226, 136, 7, 87)
    
    '-----------------------------------------------------------------------
   Case PIC_DITHER_HORZ:                              'horizontal
    '8x8
'    zdmap = Array(0, 32, 64, 96, 8, 40, 72, 104, _
                128, 160, 192, 224, 136, 168, 200, 232, _
                 80, 112, 16, 48, 88, 120, 24, 56, _
                208, 240, 144, 176, 216, 248, 152, 184, _
                 12, 44, 76, 108, 4, 36, 68, 100, _
                140, 172, 204, 236, 132, 164, 196, 228, _
                 92, 124, 28, 60, 84, 116, 20, 52, _
                220, 252, 156, 188, 212, 244, 148, 180)
    '16x16
    zdmap() = Array(68, 215, 87, 207, 79, 223, 91, 199, 71, 213, 85, 205, 77, 221, 89, 197, _
                    112, 244, 141, 5, 122, 254, 135, 11, 114, 246, 143, 7, 120, 252, 133, 9, _
                    177, 63, 99, 239, 191, 55, 106, 229, 179, 61, 96, 237, 189, 53, 105, 231, _
                    39, 155, 31, 175, 47, 149, 21, 167, 37, 153, 29, 173, 45, 151, 23, 165, _
                    217, 95, 195, 67, 209, 83, 203, 75, 219, 93, 193, 65, 211, 81, 201, 73, _
                    2, 127, 251, 129, 15, 119, 243, 139, 1, 125, 248, 131, 13, 117, 240, 137, _
                    234, 187, 51, 108, 224, 183, 59, 100, 232, 185, 48, 110, 226, 181, 57, 102, _
                    145, 19, 163, 33, 157, 27, 169, 43, 147, 17, 161, 35, 159, 25, 171, 41, _
                    70, 212, 84, 204, 76, 220, 88, 196, 69, 214, 86, 206, 78, 222, 90, 198, _
                    115, 247, 142, 6, 121, 253, 132, 8, 113, 245, 140, 4, 123, 255, 134, 10, _
                    178, 60, 97, 236, 188, 52, 104, 230, 176, 62, 98, 238, 190, 54, 107, 228, _
                    36, 152, 28, 172, 44, 150, 22, 164, 38, 154, 30, 174, 46, 148, 20, 166, _
                    218, 92, 192, 64, 210, 80, 200, 72, 216, 94, 194, 66, 208, 82, 202, 74, _
                    0, 124, 249, 130, 12, 116, 241, 136, 3, 126, 250, 128, 14, 118, 242, 138, _
                    233, 184, 49, 111, 227, 180, 56, 103, 235, 186, 50, 109, 225, 182, 58, 101, _
                    146, 16, 160, 34, 158, 24, 170, 40, 144, 18, 162, 32, 156, 26, 168, 42)
    '-----------------------------------------------------------------------
   Case PIC_DITHER_VERT:                             'vertical
    '8x8
'    zdmap = Array(0, 128, 80, 208, 8, 136, 88, 216, _
                 32, 160, 112, 240, 40, 168, 120, 248, _
                 64, 192, 16, 144, 72, 200, 24, 152, _
                 96, 224, 48, 176, 104, 232, 56, 184, _
                 12, 140, 92, 220, 4, 132, 84, 212, _
                 44, 172, 124, 252, 36, 164, 116, 244, _
                 76, 204, 28, 156, 68, 196, 20, 148, _
                108, 236, 60, 188, 100, 228, 52, 180)
    '16x16
    zdmap() = Array(157, 29, 176, 48, 148, 20, 190, 62, 158, 30, 179, 51, 151, 23, 189, 61, _
                    237, 109, 216, 88, 226, 98, 212, 84, 238, 110, 219, 91, 224, 96, 215, 87, _
                    165, 37, 134, 6, 168, 40, 142, 14, 166, 38, 133, 5, 170, 42, 141, 13, _
                    204, 76, 242, 114, 194, 66, 252, 124, 206, 78, 241, 113, 192, 64, 255, 127, _
                    145, 17, 186, 58, 154, 26, 180, 52, 146, 18, 185, 57, 152, 24, 183, 55, _
                    231, 103, 210, 82, 232, 104, 220, 92, 228, 100, 209, 81, 234, 106, 223, 95, _
                    175, 47, 136, 8, 160, 32, 128, 0, 172, 44, 139, 11, 163, 35, 131, 3, _
                    199, 71, 248, 120, 200, 72, 244, 116, 197, 69, 251, 123, 203, 75, 247, 119, _
                    159, 31, 178, 50, 150, 22, 188, 60, 156, 28, 177, 49, 149, 21, 191, 63, _
                    239, 111, 218, 90, 225, 97, 214, 86, 236, 108, 217, 89, 227, 99, 213, 85, _
                    167, 39, 132, 4, 171, 43, 140, 12, 164, 36, 135, 7, 169, 41, 143, 15, _
                    207, 79, 240, 112, 193, 65, 254, 126, 205, 77, 243, 115, 195, 67, 253, 125, _
                    147, 19, 184, 56, 153, 25, 182, 54, 144, 16, 187, 59, 155, 27, 181, 53, _
                    229, 101, 208, 80, 235, 107, 222, 94, 230, 102, 211, 83, 233, 105, 221, 93, _
                    173, 45, 138, 10, 162, 34, 130, 2, 174, 46, 137, 9, 161, 33, 129, 1, _
                    196, 68, 250, 122, 202, 74, 246, 118, 198, 70, 249, 121, 201, 73, 245, 117)
 
    '-----------------------------------------------------------------------
   Case PIC_DITHER_BNM:                                'Blue Noise Masks (my algorithm but reasonable)
    '16x16
'    zdmap() = Array(34, 150, 13, 194, 138, 51, 251, 114, 37, 211, 75, 119, 234, 144, 50, 185, _
                    122, 89, 64, 221, 74, 151, 10, 225, 172, 103, 219, 17, 165, 41, 97, 243, _
                    176, 201, 161, 96, 179, 106, 190, 68, 33, 157, 90, 230, 24, 252, 154, 6, _
                    3, 130, 20, 239, 40, 208, 23, 129, 200, 54, 186, 62, 195, 113, 80, 248, _
                    212, 46, 228, 117, 57, 233, 141, 82, 242, 110, 147, 131, 30, 205, 137, 66, _
                    191, 143, 77, 168, 28, 156, 100, 175, 8, 215, 1, 76, 178, 93, 169, 58, _
                    111, 87, 218, 123, 196, 48, 247, 15, 254, 44, 160, 226, 52, 236, 25, 159, _
                    255, 36, 177, 11, 67, 188, 121, 71, 170, 132, 86, 240, 112, 133, 42, 222, _
                    5, 146, 101, 245, 142, 85, 204, 149, 59, 102, 199, 12, 209, 19, 187, 79, _
                    202, 16, 210, 53, 32, 229, 108, 21, 220, 183, 35, 140, 65, 155, 232, 128, _
                    164, 61, 118, 162, 224, 4, 173, 39, 214, 78, 115, 193, 171, 92, 72, 139, _
                    98, 250, 192, 81, 125, 94, 235, 136, 49, 152, 238, 31, 55, 217, 47, 182, _
                    9, 241, 43, 70, 181, 153, 26, 69, 244, 104, 0, 134, 227, 116, 249, 22, _
                    135, 38, 145, 207, 56, 107, 197, 184, 91, 166, 246, 84, 158, 27, 126, 198, _
                    88, 174, 99, 231, 2, 216, 18, 124, 60, 203, 7, 189, 14, 206, 95, 163, _
                    213, 109, 237, 29, 120, 167, 83, 253, 148, 45, 127, 180, 73, 105, 223, 63)
    
    '32x32
   zdmap() = Array(112, 233, 8, 190, 32, 186, 109, 7, 198, 42, 105, 222, 136, 112, 51, 160, 0, 246, 38, 85, 127, 185, 35, 115, 196, 23, 176, 118, 156, 239, 65, 184, 169, 49, 161, 86, 139, 244, 75, 170, 238, 83, 183, 33, 67, 192, 241, 94, 196, 60, 181, 157, 221, 74, 240, 167, 67, 144, 104, 15, 200, 53, 146, 97, _
                    24, 248, 71, 208, 115, 17, 216, 27, 144, 58, 122, 155, 88, 169, 11, 139, 233, 108, 20, 119, 5, 142, 95, 12, 213, 33, 244, 136, 79, 125, 5, 211, 131, 195, 226, 41, 151, 61, 174, 97, 251, 206, 2, 212, 234, 45, 126, 72, 31, 151, 211, 64, 192, 232, 49, 182, 254, 161, 51, 219, 39, 172, 226, 88, _
                    59, 121, 10, 180, 94, 201, 125, 37, 162, 47, 130, 101, 25, 148, 202, 223, 176, 82, 250, 129, 40, 102, 152, 113, 59, 90, 198, 98, 191, 251, 150, 33, 164, 102, 143, 77, 241, 3, 137, 228, 69, 185, 79, 247, 173, 56, 118, 16, 104, 43, 171, 89, 202, 17, 217, 28, 132, 228, 2, 153, 26, 69, 109, 236, _
                    44, 230, 22, 213, 168, 53, 106, 28, 197, 114, 14, 219, 95, 195, 76, 135, 189, 216, 3, 121, 71, 162, 245, 188, 76, 176, 238, 83, 119, 178, 18, 187, 203, 91, 156, 63, 113, 222, 190, 146, 85, 237, 153, 65, 141, 6, 227, 49, 253, 61, 144, 237, 180, 54, 124, 8, 109, 41, 62, 140, 206, 48, 134, 80, _
                     1, 193, 254, 34, 128, 12, 73, 253, 20, 179, 42, 213, 30, 242, 159, 87, 166, 110, 36, 206, 22, 138, 93, 149, 208, 163, 222, 101, 12, 248, 220, 122, 138, 66, 218, 184, 87, 243, 158, 210, 57, 103, 164, 123, 188, 107, 37, 182, 19, 231, 155, 78, 106, 224, 45, 241, 32, 127, 21, 189, 171, 74, 154, 55, _
                    97, 167, 25, 105, 50, 174, 40, 117, 133, 232, 10, 91, 53, 129, 249, 211, 68, 197, 9, 246, 186, 66, 201, 170, 70, 130, 85, 52, 232, 111, 29, 239, 16, 117, 226, 150, 235, 200, 98, 4, 204, 68, 149, 223, 172, 77, 0, 96, 142, 115, 91, 133, 29, 160, 14, 116, 97, 213, 243, 146, 7, 161, 211, 180, _
                   199, 143, 72, 8, 123, 31, 166, 247, 82, 182, 48, 255, 23, 205, 154, 225, 44, 191, 57, 216, 123, 83, 233, 193, 3, 178, 35, 105, 195, 58, 92, 46, 80, 37, 209, 177, 57, 135, 75, 217, 145, 17, 111, 192, 99, 240, 62, 120, 168, 27, 237, 175, 50, 152, 38, 138, 60, 254, 159, 64, 218, 124, 132, 245, _
                   172, 108, 249, 85, 192, 230, 21, 118, 63, 234, 162, 33, 136, 41, 179, 15, 81, 253, 147, 5, 101, 209, 248, 90, 205, 227, 19, 114, 151, 14, 41, 224, 6, 158, 24, 141, 43, 96, 157, 186, 38, 198, 87, 215, 73, 229, 106, 202, 131, 221, 64, 112, 182, 73, 18, 165, 42, 143, 86, 183, 78, 235, 191, 99, _
                   127, 62, 196, 239, 112, 212, 1, 245, 103, 140, 13, 251, 151, 4, 160, 52, 95, 20, 163, 198, 32, 135, 231, 187, 126, 102, 26, 215, 51, 167, 69, 139, 181, 220, 75, 11, 170, 59, 129, 70, 207, 52, 122, 175, 58, 210, 89, 243, 185, 124, 46, 77, 240, 117, 55, 84, 12, 195, 238, 128, 119, 0, 208, 27, _
                   116, 48, 153, 205, 88, 252, 28, 177, 236, 166, 79, 25, 188, 116, 30, 141, 9, 207, 145, 224, 170, 2, 149, 219, 157, 67, 172, 45, 95, 148, 242, 91, 133, 234, 100, 36, 147, 223, 191, 46, 93, 7, 220, 134, 238, 66, 169, 227, 111, 70, 252, 36, 103, 212, 94, 47, 244, 107, 31, 250, 199, 60, 175, 34, _
                   188, 19, 164, 125, 81, 15, 110, 159, 120, 146, 255, 47, 99, 203, 40, 83, 190, 23, 179, 88, 132, 27, 175, 203, 8, 136, 221, 185, 17, 123, 226, 77, 109, 215, 66, 194, 240, 138, 74, 228, 20, 197, 84, 181, 18, 158, 247, 130, 50, 152, 235, 56, 199, 246, 62, 115, 167, 70, 120, 82, 161, 54, 155, 9, _
                   143, 42, 174, 3, 55, 212, 31, 184, 63, 105, 34, 150, 217, 108, 1, 96, 214, 122, 11, 160, 110, 16, 141, 80, 228, 25, 145, 43, 214, 98, 245, 202, 253, 92, 229, 117, 154, 101, 169, 244, 131, 208, 250, 56, 234, 71, 197, 173, 30, 76, 194, 230, 73, 184, 218, 37, 190, 241, 104, 178, 4, 131, 86, 49, _
                   163, 26, 133, 72, 187, 11, 89, 40, 113, 4, 163, 187, 14, 137, 119, 61, 242, 164, 102, 39, 150, 51, 126, 99, 156, 13, 204, 65, 236, 196, 22, 219, 107, 199, 246, 35, 221, 254, 201, 152, 69, 223, 76, 126, 92, 225, 35, 148, 204, 6, 135, 250, 84, 207, 2, 177, 55, 252, 89, 149, 34, 114, 171, 61, _
                     6, 81, 183, 100, 54, 137, 60, 233, 174, 47, 142, 24, 168, 53, 183, 82, 114, 58, 220, 22, 171, 242, 129, 93, 231, 139, 46, 225, 181, 74, 127, 140, 209, 147, 19, 166, 214, 16, 124, 28, 107, 205, 243, 194, 103, 215, 249, 26, 229, 176, 92, 189, 44, 113, 32, 201, 18, 78, 193, 110, 10, 153, 39, 237, _
                   120, 67, 231, 116, 79, 159, 194, 86, 145, 9, 80, 38, 128, 5, 162, 100, 140, 15, 255, 64, 144, 214, 68, 158, 121, 168, 29, 247, 206, 94, 189, 52, 90, 157, 44, 177, 0, 239, 39, 179, 249, 218, 156, 118, 65, 232, 45, 193, 71, 207, 155, 236, 10, 81, 180, 248, 59, 217, 100, 137, 57, 229, 21, 173, _
                   216, 29, 200, 104, 130, 93, 210, 68, 23, 96, 54, 203, 178, 90, 147, 125, 30, 111, 48, 98, 165, 227, 106, 7, 148, 43, 186, 1, 165, 108, 128, 252, 75, 142, 255, 63, 225, 50, 154, 121, 134, 230, 165, 13, 251, 21, 210, 78, 173, 224, 132, 200, 24, 56, 134, 209, 87, 235, 72, 222, 84, 36, 204, 13)
    '-----------------------------------------------------------------------
   Case Else                                       'PIC_DITHER_ORD:  ' Printer Ordered
    '8x8
    zdmap = Array(0, 128, 32, 160, 8, 136, 40, 168, _
                192, 64, 224, 96, 200, 72, 232, 104, _
                 48, 176, 16, 144, 56, 184, 24, 152, _
                240, 112, 208, 80, 248, 120, 216, 88, _
                 12, 140, 44, 172, 4, 132, 36, 164, _
                204, 76, 236, 108, 196, 68, 228, 100, _
                 60, 188, 28, 156, 52, 180, 20, 148, _
                252, 124, 220, 92, 244, 116, 212, 84)
  End Select
  
  'For Fixed Color Mapping we always use 257 value matrices
  'for Variable Color we use 65 value matrices  (this must match up with Gamut settings) = See mCMAPRemap.bas
  
  If FSet(CMAPMode, PIC_FIXED_CMAP) Then
    If WhichDither = PIC_DITHER_BIN _
    Or WhichDither = PIC_DITHER_BNM _
    Or WhichDither = PIC_DITHER_FDIAG _
    Or WhichDither = PIC_DITHER_HORZ _
    Or WhichDither = PIC_DITHER_VERT _
    Or WhichDither = PIC_DITHER_BDIAG Then
      k = Sqr(UBound(zdmap) + 1)
      ReDim DMat(0 To k - 1, 0 To k - 1)
      For i = 0 To UBound(zdmap)
        DMat(i \ k, i Mod k) = 256& * zdmap(i)
      Next i
      DModX = k
      DModY = k
      DShift = 0
    Else
      ReDim DMat(0 To 15, 0 To 15)  'Start here
      For i = 0 To 7
        For j = 0 To 7
          m = zdmap(i + 8 * j) \ 4
          DMat(i, j) = 256& * (4 * m + 0)
          DMat(i, 8 + j) = 256& * (4 * m + 2)
          DMat(8 + i, j) = 256& * (4 * m + 3)
          DMat(8 + i, 8 + j) = 256& * (4 * m + 1)
        Next j
      Next i
      DModX = 16
      DModY = 16
      DShift = 0
    End If
  
    ReDim dd(0 To DModX * DModY - 1) As Byte
    For i = 0 To DModX - 1
      For j = 0 To DModY - 1
        dd(i * DModX + j) = DMat(i, j) \ 256
      Next
    Next
    Open App.Path & "DITHER" & Hex$(WhichDither) & ".bin" For Binary As #1
    Put #1, , dd()
    Close #1
    
  Else    'Variable Colour Mapping
    If WhichDither = PIC_DITHER_BIN _
    Or WhichDither = PIC_DITHER_BNM _
    Or WhichDither = PIC_DITHER_HORZ _
    Or WhichDither = PIC_DITHER_VERT _
    Or WhichDither = PIC_DITHER_FDIAG _
    Or WhichDither = PIC_DITHER_BDIAG Then
      k = Sqr(UBound(zdmap) + 1)
      ReDim DMat(0 To k - 1, 0 To k - 1)
      For i = 0 To UBound(zdmap)
        DMat(i \ k, i Mod k) = 256& * (zdmap(i) \ 4)
      Next i
      DModX = k
      DModY = k
      DShift = 0
    Else
      ReDim DMat(0 To 7, 0 To 7)
      For i = 0 To 63
        DMat(i \ 8, i Mod 8) = 64& * zdmap(i)
      Next
      DModX = 8
      DModY = 8
      DShift = 0
    End If
  
  End If

  
End Sub

Private Sub GenSEDErrLUT(ByVal DitherMode As Long, ByVal SEDScale As Long)

 Dim n1 As Long, n2 As Long, n3 As Long, n4 As Long, m As Long, i As Long, j As Long, vc() As Variant

 'the weights for redistributing errors in colors

  If DitherMode = PIC_DITHER_SED1 Then              'Odd  Classic Floyd-Steinberg Matrix
    n1 = 7
    n2 = 3
    n3 = 5
    n4 = 1
   ElseIf DitherMode = PIC_DITHER_SED2 Then         'Odd RVT coefficients
    n1 = 11
    n2 = 5
    n3 = 7
    n4 = 1
  End If

  If DitherMode = PIC_DITHER_SED3 Then  'Preweighted variable coefficients  - Ostromoukhov Variable coefficients (SIGGRAPH 01)
    vc = Array(13, 0, 5, 13, 0, 5, 21, 0, 10, 7, 0, 4, 8, 0, 5, 47, 3, 28, 23, 3, 13, 15, 3, 8, _
         22, 6, 11, 43, 15, 20, 7, 3, 3, 501, 224, 211, 249, 116, 103, 165, 80, 67, 123, 62, 49, 489, 256, 191, _
         81, 44, 31, 483, 272, 181, 60, 35, 22, 53, 32, 19, 237, 148, 83, 471, 304, 161, 3, 2, 1, 481, 314, 185, _
         354, 226, 155, 1389, 866, 685, 227, 138, 125, 267, 158, 163, 327, 188, 220, 61, 34, 45, 627, 338, 505, 1227, 638, 1075, _
         20, 10, 19, 1937, 1000, 1767, 977, 520, 855, 657, 360, 551, 71, 40, 57, 2005, 1160, 1539, 337, 200, 247, 2039, 1240, 1425, _
         257, 160, 171, 691, 440, 437, 1045, 680, 627, 301, 200, 171, 177, 120, 95, 2141, 1480, 1083, 1079, 760, 513, 725, 520, 323, _
         137, 100, 57, 2209, 1640, 855, 53, 40, 19, 2243, 1720, 741, 565, 440, 171, 759, 600, 209, 1147, 920, 285, 2311, 1880, 513, _
         97, 80, 19, 335, 280, 57, 1181, 1000, 171, 793, 680, 95, 599, 520, 57, 2413, 2120, 171, 405, 360, 19, 2447, 2200, 57, _
         11, 10, 0, 158, 151, 3, 178, 179, 7, 1030, 1091, 63, 248, 277, 21, 318, 375, 35, 458, 571, 63, 878, 1159, 147, _
         5, 7, 1, 172, 181, 37, 97, 76, 22, 72, 41, 17, 119, 47, 29, 4, 1, 1, 4, 1, 1, 4, 1, 1, _
         4, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 65, 18, 17, 95, 29, 26, _
         185, 62, 53, 30, 11, 9, 35, 14, 11, 85, 37, 28, 55, 26, 19, 80, 41, 29, 155, 86, 59, 5, 3, 2, _
         5, 3, 2, 5, 3, 2, 5, 3, 2, 5, 3, 2, 5, 3, 2, 5, 3, 2, 5, 3, 2, 5, 3, 2, _
         5, 3, 2, 5, 3, 2, 5, 3, 2, 5, 3, 2, 305, 176, 119, 155, 86, 59, 105, 56, 39, 80, 41, 29, _
         65, 32, 23, 55, 26, 19, 335, 152, 113, 85, 37, 28, 115, 48, 37, 35, 14, 11, 355, 136, 109, 30, 11, 9, _
         365, 128, 107, 185, 62, 53, 25, 8, 7, 95, 29, 26, 385, 112, 103, 65, 18, 17, 395, 104, 101, 4, 1, 1)

    For i = 0 To 255
      If i > 127 Then j = 3 * (255 - i) Else j = 3 * i
      n1 = SEDScale * vc(j)      'scaled weights
      n2 = SEDScale * vc(j + 1)
      n3 = SEDScale * vc(j + 2)
      m = (n1 + n2 + n3) \ SEDScale 'divisor
      n1 = (i * n1) \ m
      n2 = (i * n2) \ m
      n3 = (i * n3) \ m
      With SEDCoeffs(i):  .w1 = n1:  .w2 = n2:  .w3 = n3:  End With
      With SEDCoeffs(-i): .w1 = -n1: .w2 = -n2: .w3 = -n3: End With
    Next i
   Else        'SED1 and SED2
    m = n1 + n2 + n3 + n4   'divisor
    n1 = SEDScale * n1       'scaled weights
    n2 = SEDScale * n2
    n3 = SEDScale * n3
    n4 = SEDScale * n4
    For i = 0 To 255        'Precalculate The Error Weighted Propagation arrays
      With SEDCoeffs(i)
        .w1 = (i * n1) \ m
        .w2 = (i * n2) \ m
        .w3 = (i * n3) \ m
        .w4 = (i * n4) \ m
      End With
      SEDCoeffs(-i) = SEDCoeffs(i)
      With SEDCoeffs(-i)
        .w1 = -.w1
        .w2 = -.w2
        .w3 = -.w3
        .w4 = -.w4
      End With
    Next i
  End If
    
  Open App.Path & "DITHER" & Hex$(DitherMode) & ".bin" For Binary As #1
  Put #1, , SEDCoeffs()
  Close #1

End Sub
':) Ulli's VB Code Formatter V2.16.6 (2003-Jun-07 18:05) 28 + 254 = 282 Lines
